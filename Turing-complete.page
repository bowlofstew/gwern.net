---
title: Surprisingly Turing-Complete
description: A catalogue of constructs which are unexpectedly Turing-complete; implications for security
created: 9 Dec 2012
tags: computer science
status: finished
confidence: highly likely
importance: 6
...

> "Any sufficiently complicated C or Fortran program contains an ad hoc, informally-specified, bug-ridden, slow implementation of half of Common Lisp." --[Greenspun's Tenth Law](!Wikipedia)

[Turing-completeness](!Wikipedia) (TC) is the property of a system being able to, under some simple representation of input & output, compute any program.

TC, besides being foundational to computer science and understanding many key issues like "why a perfect antivirus program is impossible", is also weirdly *common*:
one might think that such universality as a system being smart enough to be able to run any program might be difficult or hard to achieve, but it turns out to be the opposite and it is difficult to write a useful system which does not immediately tip over into TC.
It turns out that given even a little control over input into something which transforms input to output, one can typically leverage that control into full-blown TC.
This can be amusing, useful (although [usually not](!Wikipedia "Turing tarpit")), harmful, or extremely insecure & a cracker's delight (see ["language-theoretic security"](http://langsec.org/), based on exploiting "weird machines"[^tc-proofs]).
"Surprising" examples of this behavior remind us that TC lurks everywhere, and security is extremely difficult.

[^tc-proofs]: An active area of research is into languages & systems carefully designed and proven to *not* be TC (eg. [total functional programming](!Wikipedia)). Why this effort to make a language in which many programs can't be written? Because TC is intimately tied to [Godel's incompleteness theorems](!Wikipedia) & [Rice's theorem](!Wikipedia), allowing TC means that one is forfeiting all sorts of provability properties: in a non-TC language, one may be able to easily prove all sorts of useful things to know; for example, that programs terminate, that they are type-safe or not, that they can be easily converted into a logical theorem, that they consume a bounded amount of resources, that one implementation of a protocol is correct or equivalent to another implementation, that there are a lack of [side-effects](!Wikipedia "Side effect (computer science)") and a program can be transformed into a logically-equivalent but faster version (particularly important for declarative languages like [SQL](!Wikipedia) where the [query optimizer](!Wikipedia) being able to transform queries is key to acceptable performance, but of course [some SQL extensions make it TC](http://assets.en.oreilly.com/1/event/27/High%20Performance%20SQL%20with%20PostgreSQL%20Presentation.pdf) anyway by allowing either a [cyclic tag system](!Wikipedia) to be encoded, the [`model` DSL](http://blog.schauderhaft.de/2009/06/18/building-a-turing-engine-in-oracle-sql-using-the-model-clause/), or to call out to [PL/SQL](!Wikipedia)) etc. Some of the literature on "weird machines":

    - ["Exploit Programming: From Buffer Overflows to 'Weird Machines' and Theory of Computation"](http://langsec.org/papers/Bratus.pdf), Bratus et al 2011
    - ["The Halting Problems of Network Stack Insecurity"](https://www.usenix.org/legacy/publications/login/2011-12/openpdfs/Sassaman.pdf), Sassaman et al 2011
    - ["The Page-Fault Weird Machine: Lessons in Instruction-less Computation"](https://www.usenix.org/system/files/tech-schedule/woot13-papers-archive.zip), Bangert et al 2013
    - ["'Weird Machines' in ELF: A Spotlight on the Underappreciated Metadata"](http://www.cs.dartmouth.edu/~sergey/wm/woot13-shapiro.pdf), Shapiro et al 2013
    - ["Interrupt-oriented Bugdoor Programming: A minimalist approach to bugdooring embedded systems firmware"](http://tcipg.org/sites/default/files/papers/2014_q3_tfs1.pdf), Tan et al 2014
    - ["The Weird Machines in Proof-Carrying Code"](https://www.ieee-security.org/TC/SPW2014/papers/5103a209.PDF), Vanegue 2014
    - ["Framing Signals - A Return to Portable Shellcode"](http://www.syssec-project.eu/m/page-media/3/sp14_srop.pdf), Bosman & Bos 2014

   "Too powerful" languages can also manifest as nasty DoS attacks; the [fuzz tester](!Wikipedia) [afl](http://lcamtuf.coredump.cx/afl/) found in [OpenBSD](!Wikipedia)'s [roff](!Wikipedia) that it could create [an infinite loop](http://undeadly.org/cgi?action=article&sid=20150619071929 "2.2. 1 case out of 45: powerful language = exploitable language") by abusing some of the string substitution rules.

They are probably best considered as a subset of "discovered" or "found" [esoteric programming language](!Wikipedia)s (esolangs).
So [FRACTRAN](!Wikipedia), as extraordinarily minimalist as it is, does not count; nor would a deliberately obfuscated language like [Malbolge](!Wikipedia) (where it took years to write a trivial program) count because it was designed to be an esolang; but neither would [Conway's Game of Life](!Wikipedia) count because questions about whether it was TC appeared almost immediately upon publication and so it turning out to be TC is not surprising, and given the complexity of packet-switching networks & routers it's not necessarily too surprising if one can [build a cellular automaton into them](http://infoscience.epfl.ch/record/187131/files/report_1.pdf "'Is the Network Turing-Complete? EPFL Technical Report 187131', Peresini & Kostic 2013") or encode [logical circuits](http://inl.info.ucl.ac.be/system/files/main_2.pdf "'Using routers to build logic circuits: How powerful is BGP?', Chiesa et al 2013"), or if airplane ticket planning/validation is not just [NP-hard or EXPSPACE-hard but undecidable](http://www.demarcken.org/carl/papers/ITA-software-travel-complexity/ITA-software-travel-complexity.pdf "'Computational Complexity of Air Travel Planning', de Marcken 2003 [ITA Software]") (because of the complex rules airlines require).
Many configuration or special-purpose languages or tools or complicated games turn out to violate the [Rule of least power](!Wikipedia) & be ["accidentally Turing-complete"](http://beza1e1.tuxen.de/articles/accidentally_turing_complete.html), like [MediaWiki templates](https://web.archive.org/web/20131027001211/http://mentalpolyphonics.com/posts/wikimedia-proves-greenspuns-tenth-law), [`sed`](http://www.catonmat.net/blog/proof-that-sed-is-turing-complete/) (any form of templates or compile-time computation is highly likely to be TC since they often turn out to support a [lambda calculus](!Wikipedia) or a [term-rewriting](!Wikipedia) language), [XSLT](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.71.8846&rep=rep1&type=pdf "'A Simple Proof for the Turing-Completeness of XSLT and XQuery', Kepser 2004"), [Infinite Minesweeper](http://for.mat.bham.ac.uk/R.W.Kaye/minesw/minesw.htm#infinite%20minesweeper), [_Dwarf_](http://dwarffortresswiki.org/index.php/User:BaronW#The_Almighty_Dwarven_Calculator) [_Fortress_](http://mkv25.net/dfma/map-8269)^[_Dwarf Fortress_ provides clockwork mechanisms, so TC is unsurprising; but the water is implemented as a simple cellular automation, so there might be *more* ways of getting TC in _DF_! The _DF_ wiki currently lists [4 potential ways](http://dwarffortresswiki.org/index.php/DF2014:Computing) of creating logic gates: the fluids, the clockwork mechanisms, mine-carts, and creature/animal logic gates involving doors+pressure-sensors.], _Starcraft_, [_Minecraft_](http://gaming.stackexchange.com/a/20220), [Ant](!Wikipedia "Apache Ant"), _[Transport](http://www.tt-forums.net/viewtopic.php?f=29&t=37902&sid=75000c8f5f3b17f607335077dad6ce94&view=print "LED counter") [Tycoon](http://wiki.openttdcoop.org/Logic)_, [C++ templates](!Wikipedia "Template (C++)") & [Java generics](http://arxiv.org/abs/1605.05274 "'Java Generics are Turing Complete', Grigore 2016"), [DNA computing](!Wikipedia) etc are TC but these are not surprising either: many games support scripting (ie TC-ness) to make their development easier and enable fan modifications, so games' TC may be as simple as including syntax for calling out to a better-known language like Perl, or it may just be an obscure part of a standard format (most people these days are probably unaware that [TrueType](!Wikipedia) & many fonts are [PostScript](!Wikipedia) programs based on stack machines, similar to [DWARF debugging and ELF metadata](http://kristerw.blogspot.com/2016/01/more-turing-completeness-in-surprising.html), or that [some music formats](!Wikipedia "NES Sound Format") go beyond [MIDI](!Wikipedia) in providing scripting capabilities and must be interpreted to be displayed; once one knows this, then fonts being TC are no more surprising than TeX documents being TC, leading of course, to many severe & fascinating font or media security vulnerabilities such as [the BLEND vulnerability](http://googleprojectzero.blogspot.com/2015/07/one-font-vulnerability-to-rule-them-all.html "One font vulnerability to rule them all #1: Introducing the BLEND vulnerability") or [SNES](https://scarybeastsecurity.blogspot.com/2016/12/redux-compromising-linux-using-snes.html "Redux: compromising Linux using... SNES Ricoh 5A22 processor opcodes‽") & [NES code exploiting Linux systems](https://scarybeastsecurity.blogspot.com/2016/11/0day-exploit-compromising-linux-desktop.html "{0day} {exploit} Compromising a Linux desktop using... 6502 processor opcodes on the NES‽")).
Similarly, such feats as creating a small Turing machine using Legos or [dominos](!Wikipedia "Domino computer")^[See Think Math's [domino logic gates](http://think-maths.co.uk/sites/default/files/downloads/think_maths_domino_computer_worksheets.pdf) & [2014 demonstration of a 4-bit adder implemented using domino logic](https://www.youtube.com/watch?v=OpLU__bhu2w "The 10,000 Domino Computer").] would not count, since we already know that mechanical computers work.
On the other hand, the vein of computer security research called "weird machines" is a fertile ground of "*that's* TC?" reactions.
What is surprising may differ from person to person.

- [Peano arithmetic](!Wikipedia): addition & multiplication on natural numbers is enough to be TC; in contrast, [Presburger arithmetic](!Wikipedia) removes multiplication and hence is not TC
- [Wang tiles](!Wikipedia): multi-colored squares, whose placement is governed by the rule that adjacent colors must be the same
- X86 shenanigans:

    - [MMU](!Wikipedia "Memory management unit") shuffle computer RAM around to make programming easier; if a program sets up its share of memory properly, it can [execute arbitrary computations via MMU page-faults](https://github.com/jbangert/trapcc#readme) ([comments](https://news.ycombinator.com/item?id=5261598); [paper](http://0b4af6cdc2f0c5998459-c0245c5c937c5dedcca3f1764ecc9b2f.r43.cf2.rackcdn.com/12061-woot13-bangert.pdf "'The Page-Fault Weird Machine: Lessons in Instruction-less Computation', Bangert 2013")) without ever running code itself by turning the MMU faulting mechanism into a [one-instruction set computer](!Wikipedia "One_instruction_set_computer#Subtract_and_branch_if_less_than_or_equal_to_zero").
    - ["`mov` is Turing-complete"](http://www.cl.cam.ac.uk/~sd601/papers/mov.pdf "Dolan 2013"): the apparently innocuous x86 assembler instruction [`mov`](!Wikipedia "MOV (x86 instruction)"), which copies data between the CPU & RAM, can be used to implement a [transport-triggered-architecture](!Wikipedia "Transport triggered architecture") [one instruction set computer](!Wikipedia) (and for bonus points, it can be done using `xor` too)
    - ["x86 is Turing-complete with no registers"](http://mainisusuallyafunction.blogspot.com.es/2014/02/x86-is-turing-complete-with-no-registers.html)
- "return-into-[libc](!Wikipedia) attacks": software libraries provide pre-packaged functions, each of which is intended to do one useful thing; a fully TC 'language' can be cobbled out of just calls to these functions and nothing else, which enables evasion of security mechanisms since the attacker is not running any recognizable code of his own. See, among many others, ["The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the x86)"](http://cseweb.ucsd.edu/~hovav/papers/s07.html "Shacham 2007") & ["On the Expressiveness of Return-into-libc Attacks"](http://www4.ncsu.edu/~mqtran/pubs/rilc.pdf "Tran et al 2011").
- _[Pokemon Yellow](!Wikipedia)_: ["Pokemon Yellow Total Control Hack"](http://aurellem.org/vba-clojure/html/total-control.html) outlines an exploit of a memory corruption attack which allows one to write arbitrary Game Boy assembler programs by repeated in-game walking and item purchasing. (There are similar feats which have been developed by [speedrun](!Wikipedia) aficionados, but I tend to ignore most of them as they are 'impure': for example, one can turn the [SNES _Super Mario World_](http://tasvideos.org/4156S.html "Submission #4156: Masterjun's SNES Super Mario World 'Executes Arbitrary Code' in 02:25.19") [into an arbitrary game like Snake or Pong](http://hackaday.com/2014/01/10/teaching-mario-to-play-pong-and-snake-through-innumerable-exploits/ "Teaching Mario to Play Pong and Snake Through Innumerable Exploits") but you need the new programs loaded up into extra hardware, so in my opinion, it's not really showing SMW to be unexpectedly TC and is different from the other examples. Similarly, one can go from [Super Game Boy to SNES to arbitrary code like IRC](http://arstechnica.com/gaming/2015/01/pokemon-plays-twitch-how-a-robot-got-irc-running-on-an-unmodified-snes/ "Pokémon plays Twitch: How a robot got IRC running on an unmodified SNES; Behind the scenes with the hackers that crammed Web chat through a Super Game Boy."). This distinction is debatable.)
- [_Braid_](!Wikipedia "Braid (video game)"): [TC](http://arxiv.org/abs/1412.0784 "Braid is undecidable")
- musical notation: given instructions for transposing successive notes, [musical notation becomes the esolang](http://programmers.stackexchange.com/a/136179) [Choon](http://www.stephensykes.com/choon/choon.html)
- heart cells: interact in a way [allowing logic gates and hence TC](http://eprints.uwe.ac.uk/15848/6/ScarleXbox.pdf "Implications of the Turing completeness of reaction-diffusion models, informed by GPGPU simulations on an XBox 360: Cardiac arrhythmias, re-entry and the halting problem', Scarle 2009") (perhaps not *too* surprising since cellular automatons were biologically motivated)
- one category of weird machines doesn't quite count since they require an assumption along the lines of the user mechanically clicking or making the only possible choice in order to drive the system into its next step; while the user provides no logical or computational power in the process, they aren't as satisfying examples for this reason:

    - _[Magic: the Gathering](!Wikipedia)_: [TC](http://www.toothycat.net/~hologram/Turing/ "Magic: the Gathering is Turing Complete"), with the assumption that players mechanically take any option they are given, but otherwise all actions/plays are forced by _Magic_ rules
    - [CSS](!Wikipedia): was designed to be a declarative markup language for tweaking the visual appearance of HTML pages, but CSS declarations interact just enough to [allow an](https://github.com/elitheeli/stupid-machines#readme) [encoding of](http://my-codeworks.com/blog/2015/css3-proven-to-be-turing-complete) the cellular automaton [Rule 110](!Wikipedia), under the assumption of mechanical mouse clicks on the web browser to advance state
    - [Microsoft PowerPoint](!Wikipedia) animations (excluding macros, VBScript etc) can implement a Turing machine when linked appropriately ([Wildenhain 2017](https://www.andrew.cmu.edu/user/twildenh/PowerPointTM/Paper.pdf "On The Turing Completeness of MS PowerPoint"); [video](https://www.youtube.com/watch?v=uNjxe8ShM-8 "On The Turing Completeness of PowerPoint (SIGBOVIK)"); [PPT](http://tomwildenhain.com/PowerPointTM/PowerPointTM.pptx)), under the assumption of a user clicking on the only active animation triggers

# See also

- [Inner-platform effect](!Wikipedia)

# External links

- Discussion: [HN](https://news.ycombinator.com/item?id=10318729)
- [Accidentally Quadratic](https://accidentallyquadratic.tumblr.com/)
